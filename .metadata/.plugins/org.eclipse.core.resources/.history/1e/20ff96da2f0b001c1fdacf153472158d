
uart_echo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000234  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003bc  080003c4  000103c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003bc  080003bc  000103c4  2**0
                  CONTENTS
  4 .ARM          00000000  080003bc  080003bc  000103c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003bc  080003c4  000103c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103c4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009b4  00000000  00000000  000103f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000030f  00000000  00000000  00010da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  000110b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000080  00000000  00000000  00011170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014edf  00000000  00000000  000111f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fdf  00000000  00000000  000260cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072aa9  00000000  00000000  000270ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00099b57  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000018c  00000000  00000000  00099bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003a4 	.word	0x080003a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003a4 	.word	0x080003a4

080001c8 <main>:
/*
 * The entry point of the program. The program demonstrates the usage
 * of the USART2: received symbol is transmitted immediately (echo). Polling mode is used.
 */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	uart_init();
 80001ce:	f000 f809 	bl	80001e4 <uart_init>
	uart_open();
 80001d2:	f000 f83d 	bl	8000250 <uart_open>

	int data;

	while(1) {
		data = uart_read();
 80001d6:	f000 f857 	bl	8000288 <uart_read>
 80001da:	6078      	str	r0, [r7, #4]
		uart_write(data);
 80001dc:	6878      	ldr	r0, [r7, #4]
 80001de:	f000 f867 	bl	80002b0 <uart_write>
		data = uart_read();
 80001e2:	e7f8      	b.n	80001d6 <main+0xe>

080001e4 <uart_init>:
/*
 * The function initializes USART2 by enabling clock source for USART2
 * and GPIOA. Pins PA2 (TX) and PA3 (RX) configured to work in alternate modes.
 */
void uart_init(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
	// Enable clock access to USART2
	RCC->APB1ENR |= (1U << 17);
 80001e8:	4b18      	ldr	r3, [pc, #96]	; (800024c <uart_init+0x68>)
 80001ea:	69db      	ldr	r3, [r3, #28]
 80001ec:	4a17      	ldr	r2, [pc, #92]	; (800024c <uart_init+0x68>)
 80001ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f2:	61d3      	str	r3, [r2, #28]

	// Enable clock access to GPIOA (bit 17)
	RCC->AHBENR |= (1U << 17);
 80001f4:	4b15      	ldr	r3, [pc, #84]	; (800024c <uart_init+0x68>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a14      	ldr	r2, [pc, #80]	; (800024c <uart_init+0x68>)
 80001fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001fe:	6153      	str	r3, [r2, #20]

	// Enable pins for alternate functions, PA2, PA3
	GPIOA->MODER &= ~0x000000F0;
 8000200:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800020a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800020e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x000000A0; 	// Enable alternative function for PA2, PA3
 8000210:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800021a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800021e:	6013      	str	r3, [r2, #0]

	// Configure type of alternate function
	GPIOA->AFR[0] &= ~0x0000FF00;
 8000220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000224:	6a1b      	ldr	r3, [r3, #32]
 8000226:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800022a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800022e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 0x00007700;
 8000230:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000234:	6a1b      	ldr	r3, [r3, #32]
 8000236:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800023a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800023e:	6213      	str	r3, [r2, #32]
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40021000 	.word	0x40021000

08000250 <uart_open>:
/*
 * The function opens USART2 that includes enabling TX and RX modes,
 * setting baud rate and enabling USART2.
 */
void uart_open(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	// Configure USART2
	USART2->BRR = 8000000 / 9600; 	// 9600 baud
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <uart_open+0x34>)
 8000256:	f240 3241 	movw	r2, #833	; 0x341
 800025a:	60da      	str	r2, [r3, #12]
	USART2->CR1 = 0x0000000C; 		// Enable TX, RX, 8-bit data
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <uart_open+0x34>)
 800025e:	220c      	movs	r2, #12
 8000260:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <uart_open+0x34>)
 8000264:	2200      	movs	r2, #0
 8000266:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <uart_open+0x34>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= 0x00000001; 		// Enable USART2
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <uart_open+0x34>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a04      	ldr	r2, [pc, #16]	; (8000284 <uart_open+0x34>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6013      	str	r3, [r2, #0]
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	40004400 	.word	0x40004400

08000288 <uart_read>:
/*
 * This blocking function waits until read data register is empty by checking flag RXNE (bit 5)
 * in interrupt and status register (ISR) and returns received data if RXNE is 1.
 */
int uart_read(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	while(!(USART2->ISR & 0x0020)) {}
 800028c:	bf00      	nop
 800028e:	4b07      	ldr	r3, [pc, #28]	; (80002ac <uart_read+0x24>)
 8000290:	69db      	ldr	r3, [r3, #28]
 8000292:	f003 0320 	and.w	r3, r3, #32
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0f9      	beq.n	800028e <uart_read+0x6>
	return USART2->RDR;
 800029a:	4b04      	ldr	r3, [pc, #16]	; (80002ac <uart_read+0x24>)
 800029c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800029e:	b29b      	uxth	r3, r3
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40004400 	.word	0x40004400

080002b0 <uart_write>:
/*
 * This blocking function waits until transmit data register is not empty by checking flag TXE (bit 7)
 * in interrupt and status register (ISR) and transmits new data if TXE is 0.
 */
void uart_write(int ch)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & 0x0080)){}
 80002b8:	bf00      	nop
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <uart_write+0x30>)
 80002bc:	69db      	ldr	r3, [r3, #28]
 80002be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <uart_write+0xa>
	USART2->TDR = (ch & 0xFF);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	b29a      	uxth	r2, r3
 80002ca:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <uart_write+0x30>)
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	b292      	uxth	r2, r2
 80002d0:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40004400 	.word	0x40004400

080002e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800031c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e8:	480d      	ldr	r0, [pc, #52]	; (8000320 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ea:	490e      	ldr	r1, [pc, #56]	; (8000324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ec:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <LoopForever+0xe>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0b      	ldr	r2, [pc, #44]	; (800032c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000300:	4c0b      	ldr	r4, [pc, #44]	; (8000330 <LoopForever+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800030e:	f000 f813 	bl	8000338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000312:	f000 f823 	bl	800035c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000316:	f7ff ff57 	bl	80001c8 <main>

0800031a <LoopForever>:

LoopForever:
    b LoopForever
 800031a:	e7fe      	b.n	800031a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800031c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000324:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000328:	080003c4 	.word	0x080003c4
  ldr r2, =_sbss
 800032c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000330:	2000001c 	.word	0x2000001c

08000334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000334:	e7fe      	b.n	8000334 <ADC1_2_IRQHandler>
	...

08000338 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <SystemInit+0x20>)
 800033e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000342:	4a05      	ldr	r2, [pc, #20]	; (8000358 <SystemInit+0x20>)
 8000344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <__libc_init_array>:
 800035c:	b570      	push	{r4, r5, r6, lr}
 800035e:	4d0d      	ldr	r5, [pc, #52]	; (8000394 <__libc_init_array+0x38>)
 8000360:	4c0d      	ldr	r4, [pc, #52]	; (8000398 <__libc_init_array+0x3c>)
 8000362:	1b64      	subs	r4, r4, r5
 8000364:	10a4      	asrs	r4, r4, #2
 8000366:	2600      	movs	r6, #0
 8000368:	42a6      	cmp	r6, r4
 800036a:	d109      	bne.n	8000380 <__libc_init_array+0x24>
 800036c:	4d0b      	ldr	r5, [pc, #44]	; (800039c <__libc_init_array+0x40>)
 800036e:	4c0c      	ldr	r4, [pc, #48]	; (80003a0 <__libc_init_array+0x44>)
 8000370:	f000 f818 	bl	80003a4 <_init>
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	10a4      	asrs	r4, r4, #2
 8000378:	2600      	movs	r6, #0
 800037a:	42a6      	cmp	r6, r4
 800037c:	d105      	bne.n	800038a <__libc_init_array+0x2e>
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	f855 3b04 	ldr.w	r3, [r5], #4
 8000384:	4798      	blx	r3
 8000386:	3601      	adds	r6, #1
 8000388:	e7ee      	b.n	8000368 <__libc_init_array+0xc>
 800038a:	f855 3b04 	ldr.w	r3, [r5], #4
 800038e:	4798      	blx	r3
 8000390:	3601      	adds	r6, #1
 8000392:	e7f2      	b.n	800037a <__libc_init_array+0x1e>
 8000394:	080003bc 	.word	0x080003bc
 8000398:	080003bc 	.word	0x080003bc
 800039c:	080003bc 	.word	0x080003bc
 80003a0:	080003c0 	.word	0x080003c0

080003a4 <_init>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr

080003b0 <_fini>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

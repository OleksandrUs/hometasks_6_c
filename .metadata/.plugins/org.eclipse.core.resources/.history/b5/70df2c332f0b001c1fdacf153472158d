
uart_echo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000580  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000708  08000710  00010710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000708  08000708  00010710  2**0
                  CONTENTS
  4 .ARM          00000000  08000708  08000708  00010710  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000708  08000710  00010710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000708  08000708  00010708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800070c  0800070c  0001070c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010710  2**0
                  CONTENTS
 10 .bss          00000068  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000068  20000068  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006134  00000000  00000000  00010740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b5c  00000000  00000000  00016874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a8  00000000  00000000  000173d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000630  00000000  00000000  00017a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf1b  00000000  00000000  000180a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007d35  00000000  00000000  00033fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad4fb  00000000  00000000  0003bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000e91f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bc8  00000000  00000000  000e9248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080006f0 	.word	0x080006f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080006f0 	.word	0x080006f0

080001c8 <main>:
/*
 * The entry point of the program. The program demonstrates the usage
 * of the USART2: received symbol is transmitted immediately (echo). Polling mode is used.
 */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	uart_init();
 80001ce:	f000 f83f 	bl	8000250 <uart_init>
	uart_open();
 80001d2:	f000 f873 	bl	80002bc <uart_open>

	int data;

	while(1) {
		data = uart_read();
 80001d6:	f000 f88d 	bl	80002f4 <uart_read>
 80001da:	6078      	str	r0, [r7, #4]
		uart_write(data);
 80001dc:	6878      	ldr	r0, [r7, #4]
 80001de:	f000 f89d 	bl	800031c <uart_write>
		data = uart_read();
 80001e2:	e7f8      	b.n	80001d6 <main+0xe>

080001e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001e8:	e7fe      	b.n	80001e8 <NMI_Handler+0x4>

080001ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001ea:	b480      	push	{r7}
 80001ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001ee:	e7fe      	b.n	80001ee <HardFault_Handler+0x4>

080001f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001f4:	e7fe      	b.n	80001f4 <MemManage_Handler+0x4>

080001f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001f6:	b480      	push	{r7}
 80001f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001fa:	e7fe      	b.n	80001fa <BusFault_Handler+0x4>

080001fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000200:	e7fe      	b.n	8000200 <UsageFault_Handler+0x4>

08000202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000202:	b480      	push	{r7}
 8000204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000206:	bf00      	nop
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800021e:	b480      	push	{r7}
 8000220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000222:	bf00      	nop
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr

0800022c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
	...

0800023c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000240:	4802      	ldr	r0, [pc, #8]	; (800024c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000242:	f000 f8c1 	bl	80003c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	2000001c 	.word	0x2000001c

08000250 <uart_init>:
/*
 * The function initializes USART2 by enabling clock source for USART2
 * and GPIOA. Pins PA2 (TX) and PA3 (RX) configured to work in alternate modes.
 */
void uart_init(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	// Enable clock access to USART2
	RCC->APB1ENR |= (1U << 17);
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <uart_init+0x68>)
 8000256:	69db      	ldr	r3, [r3, #28]
 8000258:	4a17      	ldr	r2, [pc, #92]	; (80002b8 <uart_init+0x68>)
 800025a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800025e:	61d3      	str	r3, [r2, #28]

	// Enable clock access to GPIOA (bit 17)
	RCC->AHBENR |= (1U << 17);
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <uart_init+0x68>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <uart_init+0x68>)
 8000266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800026a:	6153      	str	r3, [r2, #20]

	// Enable pins for alternate functions, PA2, PA3
	GPIOA->MODER &= ~0x000000F0;
 800026c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800027a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x000000A0; 	// Enable alternative function for PA2, PA3
 800027c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000286:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800028a:	6013      	str	r3, [r2, #0]

	// Configure type of alternate function
	GPIOA->AFR[0] &= ~0x0000FF00;
 800028c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000290:	6a1b      	ldr	r3, [r3, #32]
 8000292:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800029a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 0x00007700;
 800029c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a0:	6a1b      	ldr	r3, [r3, #32]
 80002a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a6:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80002aa:	6213      	str	r3, [r2, #32]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000

080002bc <uart_open>:
/*
 * The function opens USART2 that includes enabling TX and RX modes,
 * setting baud rate and enabling USART2.
 */
void uart_open(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	// Configure USART2
	USART2->BRR = 8000000 / 9600; 	// 9600 baud
 80002c0:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <uart_open+0x34>)
 80002c2:	f240 3241 	movw	r2, #833	; 0x341
 80002c6:	60da      	str	r2, [r3, #12]
	USART2->CR1 = 0x0000000C; 		// Enable TX, RX, 8-bit data
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <uart_open+0x34>)
 80002ca:	220c      	movs	r2, #12
 80002cc:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <uart_open+0x34>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <uart_open+0x34>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= 0x00000001; 		// Enable USART2
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <uart_open+0x34>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <uart_open+0x34>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6013      	str	r3, [r2, #0]
}
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40004400 	.word	0x40004400

080002f4 <uart_read>:
/*
 * This blocking function waits until read data register is empty by checking flag RXNE (bit 5)
 * in interrupt and status register (ISR) and returns received data if RXNE is 1.
 */
int uart_read(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	while(!(USART2->ISR & 0x0020)) {}
 80002f8:	bf00      	nop
 80002fa:	4b07      	ldr	r3, [pc, #28]	; (8000318 <uart_read+0x24>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	f003 0320 	and.w	r3, r3, #32
 8000302:	2b00      	cmp	r3, #0
 8000304:	d0f9      	beq.n	80002fa <uart_read+0x6>
	return USART2->RDR;
 8000306:	4b04      	ldr	r3, [pc, #16]	; (8000318 <uart_read+0x24>)
 8000308:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800030a:	b29b      	uxth	r3, r3
}
 800030c:	4618      	mov	r0, r3
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40004400 	.word	0x40004400

0800031c <uart_write>:
/*
 * This blocking function waits until transmit data register is not empty by checking flag TXE (bit 7)
 * in interrupt and status register (ISR) and transmits new data if TXE is 0.
 */
void uart_write(int ch)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & 0x0080)){}
 8000324:	bf00      	nop
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <uart_write+0x30>)
 8000328:	69db      	ldr	r3, [r3, #28]
 800032a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0f9      	beq.n	8000326 <uart_write+0xa>
	USART2->TDR = (ch & 0xFF);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	b29a      	uxth	r2, r3
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <uart_write+0x30>)
 8000338:	b2d2      	uxtb	r2, r2
 800033a:	b292      	uxth	r2, r2
 800033c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40004400 	.word	0x40004400

08000350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000388 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490e      	ldr	r1, [pc, #56]	; (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0b      	ldr	r2, [pc, #44]	; (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0b      	ldr	r4, [pc, #44]	; (800039c <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800037a:	f000 f813 	bl	80003a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800037e:	f000 f993 	bl	80006a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000382:	f7ff ff21 	bl	80001c8 <main>

08000386 <LoopForever>:

LoopForever:
    b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000388:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000394:	08000710 	.word	0x08000710
  ldr r2, =_sbss
 8000398:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800039c:	20000068 	.word	0x20000068

080003a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC1_2_IRQHandler>
	...

080003a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <SystemInit+0x20>)
 80003aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ae:	4a05      	ldr	r2, [pc, #20]	; (80003c4 <SystemInit+0x20>)
 80003b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	691b      	ldr	r3, [r3, #16]
 80003d6:	f003 0302 	and.w	r3, r3, #2
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d122      	bne.n	8000424 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	f003 0302 	and.w	r3, r3, #2
 80003e8:	2b02      	cmp	r3, #2
 80003ea:	d11b      	bne.n	8000424 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f06f 0202 	mvn.w	r2, #2
 80003f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2201      	movs	r2, #1
 80003fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0303 	and.w	r3, r3, #3
 8000406:	2b00      	cmp	r3, #0
 8000408:	d003      	beq.n	8000412 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f000 f90f 	bl	800062e <HAL_TIM_IC_CaptureCallback>
 8000410:	e005      	b.n	800041e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f000 f901 	bl	800061a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f000 f912 	bl	8000642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2200      	movs	r2, #0
 8000422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	691b      	ldr	r3, [r3, #16]
 800042a:	f003 0304 	and.w	r3, r3, #4
 800042e:	2b04      	cmp	r3, #4
 8000430:	d122      	bne.n	8000478 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	2b04      	cmp	r3, #4
 800043e:	d11b      	bne.n	8000478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f06f 0204 	mvn.w	r2, #4
 8000448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2202      	movs	r2, #2
 800044e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800045a:	2b00      	cmp	r3, #0
 800045c:	d003      	beq.n	8000466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f000 f8e5 	bl	800062e <HAL_TIM_IC_CaptureCallback>
 8000464:	e005      	b.n	8000472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f000 f8d7 	bl	800061a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 f8e8 	bl	8000642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2200      	movs	r2, #0
 8000476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	691b      	ldr	r3, [r3, #16]
 800047e:	f003 0308 	and.w	r3, r3, #8
 8000482:	2b08      	cmp	r3, #8
 8000484:	d122      	bne.n	80004cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	f003 0308 	and.w	r3, r3, #8
 8000490:	2b08      	cmp	r3, #8
 8000492:	d11b      	bne.n	80004cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f06f 0208 	mvn.w	r2, #8
 800049c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2204      	movs	r2, #4
 80004a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 0303 	and.w	r3, r3, #3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d003      	beq.n	80004ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f000 f8bb 	bl	800062e <HAL_TIM_IC_CaptureCallback>
 80004b8:	e005      	b.n	80004c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f000 f8ad 	bl	800061a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f000 f8be 	bl	8000642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	691b      	ldr	r3, [r3, #16]
 80004d2:	f003 0310 	and.w	r3, r3, #16
 80004d6:	2b10      	cmp	r3, #16
 80004d8:	d122      	bne.n	8000520 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	f003 0310 	and.w	r3, r3, #16
 80004e4:	2b10      	cmp	r3, #16
 80004e6:	d11b      	bne.n	8000520 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f06f 0210 	mvn.w	r2, #16
 80004f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2208      	movs	r2, #8
 80004f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000502:	2b00      	cmp	r3, #0
 8000504:	d003      	beq.n	800050e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 f891 	bl	800062e <HAL_TIM_IC_CaptureCallback>
 800050c:	e005      	b.n	800051a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f000 f883 	bl	800061a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f000 f894 	bl	8000642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2200      	movs	r2, #0
 800051e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	2b01      	cmp	r3, #1
 800052c:	d10e      	bne.n	800054c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	2b01      	cmp	r3, #1
 800053a:	d107      	bne.n	800054c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f06f 0201 	mvn.w	r2, #1
 8000544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 f85d 	bl	8000606 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	691b      	ldr	r3, [r3, #16]
 8000552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000556:	2b80      	cmp	r3, #128	; 0x80
 8000558:	d10e      	bne.n	8000578 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000564:	2b80      	cmp	r3, #128	; 0x80
 8000566:	d107      	bne.n	8000578 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f000 f883 	bl	800067e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	691b      	ldr	r3, [r3, #16]
 800057e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000586:	d10e      	bne.n	80005a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000592:	2b80      	cmp	r3, #128	; 0x80
 8000594:	d107      	bne.n	80005a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800059e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 f876 	bl	8000692 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	691b      	ldr	r3, [r3, #16]
 80005ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005b0:	2b40      	cmp	r3, #64	; 0x40
 80005b2:	d10e      	bne.n	80005d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005be:	2b40      	cmp	r3, #64	; 0x40
 80005c0:	d107      	bne.n	80005d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80005ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f842 	bl	8000656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	2b20      	cmp	r3, #32
 80005de:	d10e      	bne.n	80005fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	f003 0320 	and.w	r3, r3, #32
 80005ea:	2b20      	cmp	r3, #32
 80005ec:	d107      	bne.n	80005fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f06f 0220 	mvn.w	r2, #32
 80005f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f836 	bl	800066a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <__libc_init_array>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	4d0d      	ldr	r5, [pc, #52]	; (80006e0 <__libc_init_array+0x38>)
 80006ac:	4c0d      	ldr	r4, [pc, #52]	; (80006e4 <__libc_init_array+0x3c>)
 80006ae:	1b64      	subs	r4, r4, r5
 80006b0:	10a4      	asrs	r4, r4, #2
 80006b2:	2600      	movs	r6, #0
 80006b4:	42a6      	cmp	r6, r4
 80006b6:	d109      	bne.n	80006cc <__libc_init_array+0x24>
 80006b8:	4d0b      	ldr	r5, [pc, #44]	; (80006e8 <__libc_init_array+0x40>)
 80006ba:	4c0c      	ldr	r4, [pc, #48]	; (80006ec <__libc_init_array+0x44>)
 80006bc:	f000 f818 	bl	80006f0 <_init>
 80006c0:	1b64      	subs	r4, r4, r5
 80006c2:	10a4      	asrs	r4, r4, #2
 80006c4:	2600      	movs	r6, #0
 80006c6:	42a6      	cmp	r6, r4
 80006c8:	d105      	bne.n	80006d6 <__libc_init_array+0x2e>
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d0:	4798      	blx	r3
 80006d2:	3601      	adds	r6, #1
 80006d4:	e7ee      	b.n	80006b4 <__libc_init_array+0xc>
 80006d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006da:	4798      	blx	r3
 80006dc:	3601      	adds	r6, #1
 80006de:	e7f2      	b.n	80006c6 <__libc_init_array+0x1e>
 80006e0:	08000708 	.word	0x08000708
 80006e4:	08000708 	.word	0x08000708
 80006e8:	08000708 	.word	0x08000708
 80006ec:	0800070c 	.word	0x0800070c

080006f0 <_init>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	bf00      	nop
 80006f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f6:	bc08      	pop	{r3}
 80006f8:	469e      	mov	lr, r3
 80006fa:	4770      	bx	lr

080006fc <_fini>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	bf00      	nop
 8000700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000702:	bc08      	pop	{r3}
 8000704:	469e      	mov	lr, r3
 8000706:	4770      	bx	lr
